% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/local_lasso.R
\name{local_lasso}
\alias{local_lasso}
\title{Local Lasso function}
\usage{
local_lasso(ann, ll_set)
}
\arguments{
\item{ann}{Approximate nearest neighbours obtained by \code{ann_search} function.}

\item{ll_set}{Object produced by \code{ll_setting} function.}
}
\value{
local_lasso object containing table of global relevence and KS statistic.
}
\description{
Local Lasso function
}
\details{
A Local Kernel Weighted Linear Regression with LASSO penalty is then fitted to each evaluation points using ann observations.
The method uses local bandwidth such that each local model is fitted only with the k-ANN observations of each evaluation points.
The value of lambda is selected with cross-validation using the \code{glmnet} package.
}
\examples{

library(locallasso)

# # - - - - - - - - - - - - - - -#
# # Numerical Example
# # - - - - - - - - - - - - - - -#

n=10^6   # number of observations
nc=19       # number of continuous variables

# Continous variables
X = mvrnorm(n,rep(0,nc),diag(1,nc))

# Categorical variable
D1 = factor(as.numeric(runif(n)<=.5))

# Response variable
y <- -X[,1]^2 - 2*sin((pi/2)*X[,2]) + X[,3]*X[,4] + rnorm(n,0,1)

data = data.frame(D1,X,y)

# Randomly spliting data
ndata=10    # number of distributed dataset
ss <- sample(1:ndata, size=nrow(data),replace=TRUE)
DD <- list()
for (i in 1:ndata) {
 DD[[i]] = data[ss==i,]
 }

# Random sampling
rand_sample = foreach(i = 1:10, .combine = "rbind") \%do\% {
 sample = sampling(DD[[i]], ss=1000)
 return(sample)
 }

# Settings
ll_set = ll_settings(rand_sample, response = 'y', k=1000, e=1000, eps = 1)

# First ann search
 first_ann = foreach(i = 1:ndata, .combine = "comb", .packages=c('RANN')) \%do\% {
   ann1 = ann_search(DD[[i]], ll_set, search='first')
   ann_list = lapply(1:ll_set$e,
                   function(d) cbind(DD[[i]][ann1$nn.idx[d,],], ann1$nn.dists[d,]))
 return(ann_list)
}

# Local Lasso
ll = local_lasso(first_ann, ll_set)

ll_summary(ll)
}
